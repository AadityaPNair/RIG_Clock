import turtle
import time
import datetime
from threading import Thread
#import psutil
#import pydub
#from pydub import AudioSegment
#from pydub.playback import play
#song = AudioSegment.from_wav("siren.wav")


#DIGITAL PART
class TurtlePen:
    def __init__(self, bg_color="black", pen_color="white"):
        self.screen = turtle.Screen()
        self.screen.bgcolor(bg_color)
        self.pen = turtle.Turtle()
        self.pen.color(pen_color)
        self.pen.pensize(10)
        self.pen.speed(0)
    def colons(self,x,y):
        self.pen.penup()
        self.pen.goto(x,y+30)
        self.pen.pendown()
        self.pen.circle(5)
        self.pen.penup()
        self.pen.goto(x,y-30)
        self.pen.pendown()
        self.pen.circle(5)
    def ZERO(self,x,y):
        self.pen.home()
        self.pen.clear()
        self.pen.penup()
        self.pen.goto(x,y)
        self.pen.left(90)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.backward(150)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.backward(75)
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.right(90)
        self.pen.forward(5)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.right(90)
        self.pen.forward(5)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.goto(x,y)
    def ONE(self,x,y):
        self.pen.penup()
        self.pen.goto(x,y)
        self.pen.pendown()
        self.pen.left(90)
        self.pen.forward(70)
        self.pen.penup()
        self.pen.backward(150)
        self.pen.pendown()
        self.pen.forward(70)
    def TWO(self,x,y):
        self.pen.penup()
        self.pen.goto(x,y)
        self.pen.left(90)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.backward(150)
        self.pen.pencolor("white")
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.right(90)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(5)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.left(90)
        self.pen.forward(75)
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
    def RETWO(self,x,y):
        self.pen.penup()
        self.pen.goto(x,y-10)
        self.pen.pendown()
        self.pen.pencolor("black")
        self.pen.backward(70)
        self.pen.penup()
        self.pen.pencolor("white")
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.right(90)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(5)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.left(90)
        self.pen.forward(75)
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
    def THREE(self,x,y):
        self.pen.penup()
        self.pen.goto(x,y)
        self.pen.left(90)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.backward(150)
        self.pen.pencolor("white")
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.right(90)
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(5)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.left(90)
        self.pen.forward(75)
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.goto(x,y)
        self.pen.right(90)
        self.pen.backward(10)
        self.pen.pendown()
        self.pen.pencolor("white")
        self.pen.backward(70)
    def RETHREE(self,x,y):
        self.pen.penup()
        self.pen.goto(x,y)
        self.pen.forward(90)
        self.pen.pencolor("black")
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.left(90)
        self.pen.forward(90)
        self.pen.left(90)
        self.pen.pendown()
        self.pen.pencolor("white")
        self.pen.forward(70)
    def FOUR(self,x,y):
        self.pen.penup()
        self.pen.goto(x,y)
        self.pen.pendown()
        self.pen.pencolor("white")
        self.pen.left(90)
        self.pen.forward(70)
        self.pen.penup()
        self.pen.backward(150)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(2)
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.pencolor("white")
        self.pen.forward(70)
        self.pen.penup()
        self.pen.pencolor("black")
        self.pen.right(90)
        self.pen.forward(10)
    def REFOUR(self,x,y):
        self.pen.penup()
        self.pen.goto(x,y-10)
        self.pen.backward(70)
        self.pen.left(90)
        self.pen.pencolor("black")
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.forward(70)
        self.pen.pendown()
        self.pen.pencolor("white")
        self.pen.forward(70)
        self.pen.penup()
        self.pen.right(90)
        self.pen.pencolor("black")
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
    def FIVE(self,x,y):
        self.pen.penup()
        self.pen.goto(x,y)
        self.pen.left(90)
        self.pen.forward(70)
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.left(90)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(5)
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.right(90)
        self.pen.forward(5)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(5)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.backward(80)
        self.pen.left(180)
    def REFIVE(self,x,y):
        self.pen.penup()
        self.pen.goto(x-10,y+70)
        self.pen.forward(10)
        self.pen.right(90)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.backward(70)
        self.pen.left(90)
        self.pen.backward(10)
        self.pen.pencolor("white")
        self.pen.pendown()
        self.pen.backward(70)
        self.pen.penup()
        self.pen.backward(10)
        self.pen.left(90)
        self.pen.backward(10)
        self.pen.backward(70)
        self.pen.backward(5)
        self.pen.backward(70)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
    def RESIX(self,x,y):
        self.pen.penup()
        self.pen.goto(x-10,y-80)
        self.pen.backward(80)
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
    def SIX(self,x,y):
        self.pen.penup()
        self.pen.goto(x,y)
        self.pen.left(90)
        self.pen.forward(70)
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.left(90)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(5)
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.right(90)
        self.pen.forward(5)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(5)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.backward(80)
        self.pen.left(180)
        self.pen.penup()
        self.pen.goto(x-10,y-80)
        self.pen.backward(80)
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
    def RESEVEN(self,x,y):
        self.pen.undo()
        self.pen.penup()
        self.pen.goto(x-90,y-75)
        self.pen.backward(10)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.pencolor("black")
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.left(90)
        self.pen.forward(80)
        self.pen.left(90)
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.right(90)
        self.pen.pendown()
        self.pen.forward(80)
        self.pen.penup()
        self.pen.pencolor("white")
        self.pen.right(90)
        self.pen.forward(90)
        self.pen.right(90)
        self.pen.forward(5)
        self.pen.pendown()
        self.pen.forward(70)
    def SEVEN(self,x,y):
        self.pen.pencolor("white")
        self.pen.clear()
        self.pen.penup()
        self.pen.goto(x,y)
        self.pen.pendown()
        self.pen.left(90)
        self.pen.forward(70)
        self.pen.penup()
        self.pen.backward(150)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(80)
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.left(90)
    def REEIGHT(self,x,y):
        self.pen.penup()
        self.pen.goto(x,y)
        self.pen.forward(2)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.right(90)
        self.pen.forward(2)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.backward(75)
        self.pen.pendown()
        self.pen.backward(70)
        self.pen.penup()
        self.pen.backward(10)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
    def EIGHT(self,x,y):
        self.pen.pencolor("white")
        self.pen.clear()
        self.pen.penup()
        self.pen.goto(x,y)
        self.pen.pendown()
        self.pen.left(90)
        self.pen.forward(70)
        self.pen.penup()
        self.pen.backward(150)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(80)
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.left(90)
        self.pen.penup()
        self.pen.goto(x,y)
        self.pen.forward(2)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.right(90)
        self.pen.forward(2)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.backward(75)
        self.pen.pendown()
        self.pen.backward(70)
        self.pen.penup()
        self.pen.backward(10)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
    def RENINE(self,x,y):
        self.pen.penup()
        self.pen.goto(x-10,y-80)
        self.pen.backward(80)
        self.pen.left(90)
        self.pen.pencolor("black")
        self.pen.pendown()
        self.pen.forward(80)
    def NINE(self,x,y):
        self.pen.pencolor("white")
        self.pen.clear()
        self.pen.penup()
        self.pen.goto(x,y)
        self.pen.pendown()
        self.pen.left(90)
        self.pen.forward(70)
        self.pen.penup()
        self.pen.backward(150)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(80)
        self.pen.left(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.left(90)
        self.pen.penup()
        self.pen.goto(x,y)
        self.pen.forward(2)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.forward(10)
        self.pen.right(90)
        self.pen.forward(2)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.backward(75)
        self.pen.backward(70)
        self.pen.penup()
        self.pen.backward(10)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
        self.pen.penup()
        self.pen.left(90)
    def REZERO(self,x,y):
        self.pen.penup()
        self.pen.goto(x-90,y-5)
        self.pen.pencolor("white")
        self.pen.backward(5)
        self.pen.pendown()
        self.pen.backward(70)
        self.pen.penup()
        self.pen.pencolor("black")
        self.pen.forward(78)
        self.pen.right(90)
        self.pen.forward(10)
        self.pen.pendown()
        self.pen.forward(70)
    def REONE(self,x,y):
        self.pen.pencolor("black")
        self.pen.penup()
        self.pen.goto(x-10,y-2)
        self.pen.left(90)
        self.pen.forward(72)
        self.pen.left(90)
        self.pen.pendown()
        self.pen.forward(80)
        self.pen.left(90)
        self.pen.forward(155)
        self.pen.pencolor("black")
        self.pen.left(90)
        self.pen.forward(80)
        self.pen.left(90)
    def draw(self,a,x,y):
        if a==1:
            self.ONE(x,y)
        elif a==2:
            self.TWO(x,y)
        elif a==3:
            self.THREE(x,y)
        elif a==4:
            self.FOUR(x,y)
        elif a==5:
            self.FIVE(x,y)
        elif a==6:
            self.SIX(x,y)
        elif a==7:
            self.SEVEN(x,y)
        elif a==8:
            self.EIGHT(x,y)
        elif a==9:
            self.NINE(x,y)
        elif a==0:
            self.ZERO(x,y)
    def nextone(self,a,x,y):
        if a==1:
            self.RETWO(x,y)
        elif a==2:
            self.RETHREE(x,y)
        elif a==3:
            self.REFOUR(x,y)
        elif a==4:
            self.REFIVE(x,y)
        elif a==5:
            self.RESIX(x,y)
        elif a==6:
            self.RESEVEN(x,y)
        elif a==7:
            self.REEIGHT(x,y)
        elif a==8:
            self.RENINE(x,y)
        elif a==9:
            self.REZERO(x,y)
        elif a==0:
            self.REONE(x,y)
    def nextTen(self,a,x,y):
        if a==1:
            self.RETWO(x,y)
        elif a==2:
            self.RETHREE(x,y)
        elif a==3:
            self.REFOUR(x,y)
        elif a==4:
            self.REFIVE(x,y)
        elif a==5:
            self.RESIX(x,y)
        elif a==6:
            self.ZERO(x,y)
        elif a==0:
            self.REONE(x,y)   
#THE CLOCK
pr=turtle.Turtle()
turtle.bgcolor("black")
pr.speed(0)
pr.pencolor("white")
pr.home()
x=0
y=0
pr.write(x,y)
y=-100
pr.penup()
pr.setpos(x,y)
pr.pendown()
pr.fillcolor("yellow")
pr.begin_fill()
pr.circle(100)
pr.end_fill()
pr.penup()
pr.setpos(x,y+10)
pr.pendown()
pr.fillcolor("black")
pr.begin_fill()
pr.circle(90)
pr.end_fill()
pr.penup()
pr.home()
pr.left(90)
# Alarm variables
alarm_set = False
alarm_time = None
alarm_hour = 0
alarm_minute = 0
alarm_second = 0
# Create buttons
def create_button(x, y, text, action):
    button = turtle.Turtle()
    button.shape("square")
    button.color("lightblue")
    button.shapesize(stretch_wid=2, stretch_len=5)
    button.penup()
    button.goto(x, y)
    button.pencolor("black")
    button.write(text, align="center", font=("Courier", 14, "bold"))
    button.onclick(lambda x, y: action())
    return button
def set_alarm():
    global alarm_set, alarm_time, alarm_hour, alarm_minute, alarm_second
    alarm_time = f"{alarm_hour:02d}:{alarm_minute:02d}:{alarm_second:02d}"
    alarm_set = True
def update_alarm_display():
    alarm_display.clear()
    alarm_display.pencolor("white")
    alarm_display.write(f"Alarm Time: {alarm_hour:02d}:{alarm_minute:02d}:{alarm_second:02d}", align="center", font=("Courier", 18, "bold"))
def increment_hour():
    global alarm_hour
    alarm_hour = (alarm_hour + 1) % 24
    update_alarm_display()
def increment_minute():
    global alarm_minute
    alarm_minute = (alarm_minute + 1) % 60
    update_alarm_display()
def increment_second():
    global alarm_second
    alarm_second = (alarm_second + 1) % 60
    update_alarm_display()
alarm_display = turtle.Turtle()
alarm_display.hideturtle()
alarm_display.penup()
alarm_display.goto(0, 300)
update_alarm_display()
create_button(-200, 250, "Hour++", increment_hour)
create_button(0, 250, "Minute++", increment_minute)
create_button(200, 250, "Second++", increment_second)
create_button(0, 200, "Set Alarm", set_alarm)
#NAMING THE CLOCK
for i in range(0,12):
    pr.forward(75)
    pr.pendown()
    pr.write(12-i)
    pr.penup()
    pr.setpos(0,0)
    pr.left(360/12)
pr.penup()
pr.home()
pr.left(90)
#SUBDIVISIONS OF CLOCK
for j in range(0,60):
    if j%5!=0:
        pr.forward(75)
        pr.pendown()
        pr.backward(2)
        pr.penup()
        pr.setpos(0,0)
        pr.left(360/60)
    else:
        pr.left(360/60)
pr.penup()
pr.home()
pr.pencolor("black")
h=turtle.Turtle()
m=turtle.Turtle()
s=turtle.Turtle()
#TAKING SYSTEM TIME
P=datetime.datetime.now().hour
Q=datetime.datetime.now().minute
sect=Q%12
first_time=0
#CALCULATING ANGLES 
R=Q*6
T=P*30
if Q%12==0:
    F=Q*0.5
    K=90-T
    A=K-F
else:
    F=(Q-(Q%12))*0.5
    K=90-T
    A=K-F
h.left(A)
h.pencolor("red")
h.pendown()
h.pensize(5)
h.forward(60)
m.pensize(3)
m.pencolor("yellow")
m.left(90-R)
m.pendown()
m.forward(70)
S=datetime.datetime.now().second
L=S*6
s.left(90-L)
s.pensize(1)
s.pencolor("white")
def analogue():
    w=TurtlePen()
    e=TurtlePen()
    d=TurtlePen()
    r=TurtlePen()
    t=TurtlePen()
    g=TurtlePen()
    y=TurtlePen()
    u=TurtlePen()
    P=datetime.datetime.now().hour
    Q=datetime.datetime.now().minute
    S=datetime.datetime.now().second
    hour_ones=P%10
    hour_tens=(P-hour_ones)/10
    minute_ones=Q%10
    minute_tens=(Q-minute_ones)/10
    second_ones=S%10
    second_tens=(S-second_ones)/10
    w.draw(hour_tens,-300,-200)
    e.draw(hour_ones,-190,-200)
    d.colons(-170,-200)
    r.draw(minute_tens,-50,-200)
    t.draw(minute_ones,60,-200)
    g.colons(80,-200)
    y.draw(second_tens,190,-200)
    u.draw(second_ones,300,-200)
    while True:
        global sect
        s.pendown()
        s.forward(75)
        S=S+1
        if S==60:
            m.undo()
            m.right(6)
            m.forward(70)
            Q=Q+1
            S=0
            if Q%12==0:
                h.undo()
                h.right(6)
                h.forward(60)
                Q=1
                sect=sect+1
                if sect==4:
                    P=P+1
                    sect=0
        u.nextone(second_ones,300,-200)
        second_ones=second_ones+1
        if second_ones==10:
            y.nextTen(second_tens,190,-200)
            second_ones=0
            second_tens=second_tens+1
            if second_tens==6:
                y.ZERO(190,-200)
                t.nextone(minute_ones,60,-200)
                minute_ones=minute_ones+1
                second_tens=0
                if minute_ones==10:
                    r.nextTen(minute_tens,-50,-200)
                    minute_tens=minute_tens+1
                    minute_ones=0
                    if minute_tens==6:
                        r.ZERO(-50,-200)
                        e.nextone(hour_ones,-190,-200)
                        minute_tens=0
                        hour_ones=hour_ones+1
                        if hour_ones==10:
                            w.nextTen(hour_tens,-300,-200)
                            hour_tens=hour_tens+1
                            hour_ones=0
                            if hour_tens==2:
                                if hour_ones==5:
                                    hour_tens=0
                                    hour_ones=0
                                    w.ZERO(-300,-200)
                                    e.ZERO(-190,-200)
        s.undo()
        s.right(6)
        global alarm_set
        global alarm_time
        if alarm_set and alarm_hour== datetime.datetime.now().hour and alarm_minute==datetime.datetime.now().minute and alarm_second==datetime.datetime.now().second:
            digital_turtle = turtle.Turtle()
            digital_turtle.hideturtle()
            digital_turtle.penup()
            digital_turtle.goto(250,0)
            digital_turtle.color("red")
            digital_turtle.write("ALARM!", align="center", font=("Courier", 24, "bold"))
            #play(song)
            alarm_set = False
        time.sleep(0.25)
clock_thread = Thread(target=analogue())
clock_thread.daemon = True
clock_thread.start()
clock()   
# Keep the window open
turtle.done()
